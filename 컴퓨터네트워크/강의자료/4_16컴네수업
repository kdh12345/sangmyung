트랜스포트 -> 프로세스간의 논리적 통신 받은 패킷==> 올바른 프로세스에게 전달-> 다중화/역다중화
tcp--> 신뢰성 있는 data 전송==> 재전송가능
네트워크 -> 호스트간의  논리적 통신
우체통: 네트워크 계층
메시지 송수신: multiplexing/demultiplexing
tcp 패킷 순서 맞춘다. 네트워크 패킷 스위칭
송신자로부터 수신자: 손실 혹은 순서가 중간에 바뀔 수 있다.
udp:아무것도 안함(최선형 전달 서비스==패킷 스위칭)이것만 수행
==>빠르다, 필요시 application 계층에서 선별적 구현
네트워크 할 수 없는일: 지연보장, 대역폭보장


멀티 플랙싱: 수신자 node가 트랜스포트를 다른 계층에  공유
디멀티 플랙싱:  송신자 수신자 프로세스에게 나누어줌

프로세스 구분==> 포트번호 필요
다른 헤더 필드: tcp/udp 차이
application data=application segment=패킷=payload
src port:16bit 0-2에 16승-1
dst port:16bit
비연결형 다중화/역다중화
소켓(다리역할)의 포트번호 할당
애플리케이션 계층-트랜스포트 계층
udp-->목적지 ip주소, 목적지 port no
dst ip,port 같으면 간다!!!!

tcp ->서로다른 서버를 제공
출발지,목적지 ip,port(연결형 서비스)
클라이언트가 대상에게 프로세스 제공
ppt web환경(http)
대상 ip,port가 달라도 소켓을 따로 생성


비연결형 호스트 프로세스 구분:대상 ip,port
연결형                 소스 대상 ip,port

ip최소기능: 체크섬
수신측에서 필요한 기능: 에플리케이션에서 구현
snmp:망의 정보를 뿌려줌
dns:ip를 name으로 매핑
-->손실방지는 dns내에 구현되어있음
헤더를 붙이는 행위:캡슐화
     해체      디캡슐레이션
length: udp데이터의 길이+헤더의 길이
0~2에16-1
체크섬: 데이터의 오류를 검사
방법:tcp와 udp,ip동일
송신: 16비트로 자르고 2개씩 더함(최고차항에 1이 나오면 마지막에 붙이고  더하고 1의 보수 취함)
수신 현재 체크섬==기존 체크섬 비교
